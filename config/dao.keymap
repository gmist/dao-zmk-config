/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    chosen {
        // zmk,matrix_transform = &default_transform;

        zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    behaviors {
        mt_n: mt_n {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_N";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            global-quick-tap;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
   &kp EQUAL        &kp TAB                 &kp Q           &kp W         &kp E           &kp R          &kp T            &kp Y         &kp U          &kp I             &kp O          &kp P  &kp BSLH  &kp MINUS
   &kp GRAVE  &mt_n LSHFT A  &mt_n LEFT_CONTROL S    &mt_n LALT D  &mt_n RCMD F           &kp G          &kp H     &mt_n RCMD J  &mt_n RALT K  &mt_n RCTRL L  &mt_n RSHFT SEMI        &kp SQT
&kp CAPSLOCK          &kp Z                 &kp X           &kp C         &kp V           &kp B          &kp N            &kp M     &kp COMMA        &kp DOT          &kp FSLH  &mt LBKT RBKT
                                                   &lt 3 CAPSLOCK   &lt 2 SPACE  &lt LWR ESCAPE  &lt LWR ENTER  &lt 2 BACKSPACE     &lt 3 DEL
            >;
        };

        lower_layer {
            bindings = <
          &trans                   &kp F11               &kp N1            &kp N2             &kp N3     &kp N4     &kp N5                &kp N6                 &kp N7                        &kp N8                          &kp N9    &kp N0  &kp F12  &trans
&kp LEFT_BRACKET  &mt_n RSHIFT EXCLAMATION  &mt_n LCTRL AT_SIGN  &mt_n LALT POUND  &mt_n LCMD DOLLAR  &kp PRCNT  &kp CARET  &mt_n RCMD AMPERSAND  &mt_n RIGHT_ALT ASTRK  &mt_n RCTRL LEFT_PARENTHESIS  &mt_n RSHIFT RIGHT_PARENTHESIS  &kp RBKT
          &trans                    &kp F1               &kp F2            &kp F3             &kp F4     &kp F5     &kp F6                &kp F7                 &kp F8                        &kp F9                         &kp F10    &trans
                                                                           &trans             &trans     &trans     &trans                &trans                 &trans
            >;
        };

        raise_layer {
            bindings = <
    &kp LPAR                 &kp RPAR            &kp KP_SLASH         &kp KP_N7         &kp KP_N8    &kp KP_N9    &kp KP_MINUS     &kp K_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp LPAR  &kp RPAR
   &kp EQUAL  &mt_n LSHFT KP_MULTIPLY  &mt LEFT_CONTROL KP_N4  &mt_n LALT KP_N5  &mt_n LCMD KP_N6  &kp KP_PLUS  &kp LEFT_ARROW       &kp DOWN        &kp UP        &kp RIGHT          &trans           &trans
&kp KP_COMMA                &kp KP_N0               &kp KP_N1         &kp KP_N2         &kp KP_N3   &kp KP_DOT        &kp HOME  &kp PAGE_DOWN   &kp PAGE_UP          &kp END          &trans           &trans
                                                                         &trans            &trans       &trans          &trans         &trans        &trans
            >;
        };

        adjust_layer {
            bindings = <
&sys_reset   &bootloader         &none         &none         &none         &none         &none         &none         &none         &none         &none       &none  &bootloader  &sys_reset
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
     &none     &kp K_CUT    &kp K_COPY   &kp K_PASTE         &none         &none         &none         &none         &none         &none         &none       &none
                                              &trans         &none        &trans        &trans         &none        &trans
            >;
        };
    };
};
